version: 2.1

commands:
  prepare_bats:
    description: "Prepare an environment to run BATS test"
    steps:
      - run:
          name: Prepare BATS
          # See also: https://circleci.com/docs/env-vars/#alpine-linux
          shell: /bin/sh -leo pipefail
          environment:
            BASH_ENV: "/etc/profile"
          command: |
            apk upgrade --update-cache
            apk add --virtual .bats-run bats helm jq python3 py3-pip
            python3 -m venv /tmp/venv
            /tmp/venv/bin/pip3 install yq

            cat \<<EOF | tee -a "$BASH_ENV"
            export PATH=/tmp/venv/bin:\$PATH
            EOF
      - checkout

  test_bats:
    description: "Run BATS tests"
    parameters:
      component:
        description: "The name of the component to build"
        type: string
      run_script:
        description: "The script names relative to component directory"
        type: string
        default: "test/unit/run.sh"
    steps:
      - run:
          name: "Add Helm dependencies"
          # See also: https://circleci.com/docs/env-vars/#alpine-linux
          shell: /bin/sh -leo pipefail
          environment:
            BASH_ENV: "/etc/profile"
          command: |
            cd "<< parameters.component >>"
            # Helm is painful https://github.com/helm/helm/issues/8036
            i=0
            yq -r '.dependencies[]?.repository' < Chart.yaml | while read -r p; do
              i=$((i+1))
              helm repo add dep$i "$p"
            done
            helm dependency build
      - run:
          name: "Run tests via << parameters.run_script >>"
          # See also: https://circleci.com/docs/env-vars/#alpine-linux
          shell: /bin/sh -leo pipefail
          environment:
            BASH_ENV: "/etc/profile"
          command: |
            cd "<< parameters.component >>"
            # BATS path mangling stopped working when BASH_ENV is set
            unset BASH_ENV
            sh "<< parameters.run_script >>" -x

  build_helm:
    description: "Builds the Helm artifact"
    parameters:
      component:
        description: "The name of the component to build"
        type: string
      app_version_repo:
        description: "The repository to resolve appVersion from"
        type: string
        default: ""
      pre_build:
        description: "Pre-build steps"
        type: steps
        default: []
    steps:
      - run:
          name: Prepare environment
          command: |
            apk upgrade --update-cache
            apk add --virtual .helm-build helm git openssh jq skopeo
      - checkout
      - run:
          name: Fetch tags
          command: |
            git fetch --tags
      - run:
          name: Determine version
          # See also: https://circleci.com/docs/env-vars/#alpine-linux
          shell: /bin/sh -leo pipefail
          environment:
            BASH_ENV: "/etc/profile"
          command: |
            VERSION=$(sh scripts/gen-version.sh)
            VERSION=${VERSION##v}
            echo "export VERSION=$VERSION" | tee -a "$BASH_ENV"

            if [ "<< parameters.app_version_repo >>" != "" ]; then
              APP_VERSION=$(sh scripts/get-latest-tag.sh "<< parameters.app_version_repo >>")
              echo "export APP_VERSION=$APP_VERSION" | tee -a "$BASH_ENV"
            fi
      - steps: << parameters.pre_build >>
      - run:
          name: Create package
          # See also: https://circleci.com/docs/env-vars/#alpine-linux
          shell: /bin/sh -leo pipefail
          environment:
            BASH_ENV: "/etc/profile"
          command: |
            set --
            set -- "$@" --dependency-update

            if [ "$VERSION" != "" ]; then
              set -- "$@" --version "$VERSION"
              echo "Version: $VERSION"
            else
              echo >&2 "Warning: VERSION was not set"
            fi

            if [ "$APP_VERSION" != "" ]; then
              set -- "$@" --app-version "$APP_VERSION"
              echo "App Version: $APP_VERSION"
            else
              echo >&2 "Warning: APP_VERSION was not set"
            fi

            helm package "$@" "<< parameters.component >>"
            mkdir -p /tmp/artifacts
            mv "<< parameters.component >>"-*.tgz /tmp/artifacts
      - save_cache:
          key: "v1-<< parameters.component >>-{{ .Branch }}-{{ .Environment.CIRCLE_SHA1 }}"
          paths:
            - /tmp/artifacts
      - store_artifacts:
          path: /tmp/artifacts
          destination: "<< parameters.component >>-artifacts"

  push_helm:
    description: "Push the Helm artifact to Docker OCI Registry"
    parameters:
      component:
        description: "The name of the component to push"
        type: string
      repository:
        description: "The name of the Docker OCI Registry"
        type: string
        default: "oci://registry-1.docker.io/varnish"
    steps:
      - run:
          name: Prepare environment
          command: |
            apk upgrade --update-cache
            apk add --virtual .helm-build helm
      - run:
          name: Setup environment
          command: |
            echo $DOCKER_PASSWORD | helm registry login -u "$DOCKER_USERNAME" --password-stdin registry-1.docker.io
      - restore_cache:
          key: "v1-<< parameters.component >>-{{ .Branch }}-{{ .Environment.CIRCLE_SHA1 }}"
      - run:
          name: Upload to Docker OCI Registry
          command: |
            helm push /tmp/artifacts/"<< parameters.component >>"-*.tgz "<< parameters.repository >>"

jobs:
  test_varnish_cache:
    docker:
      - image: alpine:latest
    steps:
      - prepare_bats
      - test_bats:
          component: varnish-cache
      - test_bats:
          component: varnish-cache
          run_script: test/unit_common/run.sh

  build_varnish_cache:
    docker:
      - image: alpine:latest
    steps:
      - build_helm:
          component: varnish-cache
          app_version_repo: docker://docker.io/varnish

  push_varnish_cache:
    docker:
      - image: alpine:latest
    steps:
      - push_helm:
          component: varnish-cache

workflows:
  version: 2
  build-release:
    jobs:
      - test_varnish_cache:
          filters:
            tags:
              only: /^v.*/
      - build_varnish_cache:
          requires:
            - test_varnish_cache
          filters:
            tags:
              only: /^v.*/
      - push_varnish_cache:
          requires:
            - build_varnish_cache
          filters:
            branches:
              ignore: /.*/
            tags:
              only: /^v.*/
